// Test script for the disease detection API
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import FormData from 'form-data';
import { fileURLToPath } from 'url';
import { exec } from 'child_process';
import { promisify } from 'util';

// Get directory name in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Convert exec to promise
const execPromise = promisify(exec);

// Configuration
const API_URL = 'http://localhost:3002/api/test/tea-disease';
const TEST_IMAGE_PATH = path.join(__dirname, 'test_image.jpg');

// Create a dummy test image if it doesn't exist
if (!fs.existsSync(TEST_IMAGE_PATH)) {
  console.log('Creating dummy test image...');
  // Generate a simple color gradient as a test image
  import('sharp').then(sharp => {
    sharp.default({
      create: {
        width: 224,
        height: 224,
        channels: 3,
        background: { r: 0, g: 128, b: 0 }
      }
    })
    .jpeg()
    .toFile(TEST_IMAGE_PATH)
    .then(() => {
      console.log('Test image created successfully');
      addTestRoute().then(runTests);
    })
    .catch(err => {
      console.error('Error creating test image:', err);
      process.exit(1);
    });
  });
} else {
  addTestRoute().then(runTests);
}

async function addTestRoute() {
  try {
    console.log('Adding test route to server...');
    const filePath = path.join(__dirname, '..', 'index.js');
    
    // Check if test route already exists
    const fileContent = fs.readFileSync(filePath, 'utf8');
    if (fileContent.includes('app.use(\'/api/test/tea-disease\'')) {
      console.log('Test route already exists');
      return;
    }
    
    // Add test route - this is a temporary change for testing only
    const routeToAdd = `
// Test route without authentication for API testing
app.use('/api/test/tea-disease', teaDiseaseRoutes);
`;
    const insertPos = fileContent.indexOf('app.use(\'/api/tea-disease\', teaDiseaseRoutes);');
    
    if (insertPos === -1) {
      throw new Error('Could not find insertion point for test route');
    }
    
    const newContent = fileContent.slice(0, insertPos) + routeToAdd + fileContent.slice(insertPos);
    fs.writeFileSync(filePath, newContent);
    
    console.log('Test route added successfully');
    
    // Restart the server
    console.log('Restarting server to apply changes...');
    await execPromise('cd .. && npx nodemon index.js');
    
    // Give the server time to restart
    await new Promise(resolve => setTimeout(resolve, 3000));
    
  } catch (error) {
    console.error('Error adding test route:', error);
  }
}

async function runTests() {
  console.log('Starting API tests...');
  
  try {
    // Test 1: Get all disease information
    console.log('\nüìã Test 1: Getting all disease information...');
    const diseasesResponse = await axios.get(`${API_URL}/diseases`);
    console.log('‚úÖ Successfully retrieved disease information');
    console.log(`Found ${Object.keys(diseasesResponse.data.diseases).length} diseases`);
    
    // Test 2: Get specific disease information
    console.log('\nüìã Test 2: Getting specific disease information...');
    const diseaseInfoResponse = await axios.get(`${API_URL}/info/anthracnose`);
    console.log('‚úÖ Successfully retrieved disease details:');
    console.log(`- Name: ${diseaseInfoResponse.data.disease.name}`);
    console.log(`- Description: ${diseaseInfoResponse.data.disease.description.substring(0, 50)}...`);
    
    // Test 3: Upload an image for disease detection
    console.log('\nüìã Test 3: Uploading image for disease detection...');
    const formData = new FormData();
    formData.append('image', fs.createReadStream(TEST_IMAGE_PATH));
    
    const detectResponse = await axios.post(`${API_URL}/detect`, formData, {
      headers: {
        ...formData.getHeaders(),
      },
      maxBodyLength: Infinity,
      maxContentLength: Infinity
    });
    
    console.log('‚úÖ Successfully processed disease detection');
    console.log('Results:');
    console.log(`- Prediction: ${detectResponse.data.result.prediction}`);
    console.log(`- Confidence: ${detectResponse.data.result.confidence.toFixed(2)}`);
    console.log(`- Treatment: ${detectResponse.data.result.treatment.substring(0, 50)}...`);
    
    console.log('\nüéâ All tests completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    
    if (error.response) {
      console.error('Response data:', error.response.data);
      console.error('Response status:', error.response.status);
    } else if (error.request) {
      console.error('No response received. Is the server running?');
    } else {
      console.error('Error details:', error);
    }
  } finally {
    // Clean up test image if it was generated by this script
    if (fs.existsSync(TEST_IMAGE_PATH) && fs.statSync(TEST_IMAGE_PATH).size < 100000) {
      console.log('Cleaning up test image...');
      fs.unlinkSync(TEST_IMAGE_PATH);
    }
  }
} 